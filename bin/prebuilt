#!/usr/bin/env node

const path = require('path')

require('dotenv').config({ path: path.join(process.cwd(), '.env') })

const http = require('http')
const fs = require('fs')
const readline = require('readline')
const { promisify } = require('util')

const AdmZip = require('adm-zip')
const watch = require('watch')
const chalk = require('chalk')
const netrc = require('netrc')
const request = require('request-promise')
const static = require('node-static')

const build = require('../tasks/build')

const readFile = path => new Promise(res => fs.readFile(path, 'utf8', (e, d) => res(d)))
const writeFile = promisify(fs.writeFile.bind(fs))
const readdir = promisify(fs.readdir.bind(fs))

const [ _1, _2, cmd, arg1, arg2 ] = process.argv
const PROJECT_PATH = process.cwd()

const main = async () => {
  switch (cmd) {
    case 'init':
      await init()
      break
    case 'build':
      await build(PROJECT_PATH)
      break
    case 'develop':
      await build(PROJECT_PATH)
      await new Promise(res => {
        // watch
        watch.watchTree(`${PROJECT_PATH}/data`, () => {
          build(PROJECT_PATH)
        })
        watch.watchTree(`${PROJECT_PATH}/input`, () => {
          build(PROJECT_PATH)
        })
        // serve
        var fileServer = new static.Server(`${PROJECT_PATH}/output`)
        http.createServer(function (request, response) {
          request.addListener('end', function () {
            fileServer.serve(request, response)
          }).resume()
        }).listen(arg1 || 5000)
      })
      break
    case 'login':
      await login()
      break
    case 'whoami':
      const creds = netrc()['prebuilt.xyz']
      console.log(creds ? creds.email : `How should I know? Try logging!`)
      break
    case 'logout':
      const logoutCreds = netrc()
      delete logoutCreds['prebuilt.xyz']
      netrc.save(logoutCreds)
      console.log('Logged out.')
      break
    case 'deploy':

      const zip = new AdmZip()

      zip.addLocalFolder(`${PROJECT_PATH}/input`)
      zip.addLocalFolder(`${PROJECT_PATH}/data`)
      zip.addLocalFile(`${PROJECT_PATH}/config.yaml`)

      const config = fs.readFileSync(`${PROJECT_PATH}/config.yaml`, 'utf8')

      await request.post({
        url: `${process.env.ADMIN_DOMAIN}/deploy?config=${encodeURIComponent(config)}&token=${netrc()['prebuilt.xyz'].token}`,
        formData: { 
          package: {
            value: zip.toBuffer(),
            options: {
              filename: 'package.zip',
              contentType: 'application/zip'
            }
          }
        }
      })
      break
    case 'env':
      if (arg2) {
        // setting
        const { data: env } = await request.put({ 
          url: `${process.env.ADMIN_DOMAIN}/env?token=${netrc()['prebuilt.xyz'].token}`, 
          data: {
            [arg1]: arg2
          }
        })
        console.log('yes!', env)
      } else {
        // getting
        console.log('huh')
        const { data: env } = await request.get({ 
          url: `${process.env.ADMIN_DOMAIN}/env?token=${netrc()['prebuilt.xyz'].token}`
        })
        console.log('yeah', env)
      }
      break
    case 'undeploy':

      const { confirm } = await askQuestions({
        confirm: 'Are you sure you want to undeploy this site? It will no longer be auto-deployed, but no local files will be affected. (Type "CONFIRM" to confirm)'
      })

      if (confirm !== 'CONFIRM')
        return console.log('Ok, whew, looks like you didn\'t mean to undeploy anything... Carry on')

      const configForDeleting = fs.readFileSync(`${PROJECT_PATH}/config.yaml`, 'utf8')
      await request.post({ 
        url: `${process.env.ADMIN_DOMAIN}/undeploy?config=${encodeURIComponent(configForDeleting)}&token=${netrc()['prebuilt.xyz'].token}` 
      })

      console.log('Undeployed successfully.')
      break
    default:
      help()
  }
}

// GO
main().then(
  () => process.exit(0),
  e => {
    console.log('Error: ', e)
    help()
    process.exit(1)
  }
)

// helpers
function help() {
  console.log(`
Prebuilt - ${chalk.gray('Static-site generator for dynamic websites')}

  ${chalk.gray('Commands:')}
    init                 - Initialize new project in current directory
    build                - One-off build from ${prebuilt.project.INPUT_DIR}/ into ${prebuilt.project.OUTPUT_DIR}/
    develop [port=5000]  - Start dev server, rebuilding on changes in ${prebuilt.project.DATA_DIR} or ${prebuilt.project.INPUT_DIR}
    deploy [env]         - (Re)uploads config, templates, user-defined data files to 
                           Prebuilt's syncing servers for auto-redeploying on data changes

    env                  - List all environment variables
    env [key] [value]    - Set Environment variable
    login                - Login with username, password
    logout               - Logout, removing the ability to deploy or sync remote data
    whoami               - Prints out the email address of the current login
    update-billing       - Securely updates billing info for logged in account
`)
}

async function fileExists(path) {
  try {
    await promisify(fs.stat.bind(fs))(path)
    return true
  } catch(e) {
    return false
  }
}

async function askQuestions(questions) {

  let answers = {}
  
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  })

  const ask = question => {
    return new Promise(res => rl.question(question, res))
  }

  for (let key in questions) {
    const val = await ask(questions[key])
    answers[key] = val
  }

  rl.close()
  return answers
}

async function init() {

  if (await fileExists(`${PROJECT_PATH}/${prebuilt.project.CONFIG_FILE}`)) {
    return console.log('Project already created here.')
  }

  const { name } = await askQuestions({ name: 'Project Name: ' })

  await prebuilt.project.init(PROJECT_PATH, { name })

  console.log(`
Project scaffolded!

Created:
  ${prebuilt.project.INPUT_DIR}/
  ${prebuilt.project.OUTPUT_DIR}/
  ${prebuilt.project.DATA_DIR}/
  ${prebuilt.project.CONFIG_FILE} 
  `)
}

async function login() {
  const { email } = await askQuestions({ email: 'Email: ' })
  console.log('Sending you a magic link in an email. Click it and be authenticated, friend...')
  const token = await prebuilt.auth.login(email)
  console.log(`Nice work! You are now logged in as ${email}`)
  const existing = netrc() || {}
  existing['prebuilt.xyz'] = { email, token }
  netrc.save(existing)
}
