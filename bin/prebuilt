#!/usr/bin/env node

const path = require('path')

require('dotenv').config()

const fs = require('fs')
const readline = require('readline')
const { promisify } = require('util')

const AdmZip = require('adm-zip')
const chalk = require('chalk')
const netrc = require('netrc')
const request = require('request-promise')
const yaml = require('node-yaml')

const build = require('../tasks/build')
const develop = require('../tasks/develop')
const deploy = require('../tasks/deploy')
const loginTask = require('../tasks/login')

const prebuilt = require('../../core/lib/prebuilt')

const readFile = path => new Promise(res => fs.readFile(path, 'utf8', (e, d) => res(d)))
const writeFile = promisify(fs.writeFile.bind(fs))
const readdir = promisify(fs.readdir.bind(fs))

const [ _1, _2, cmd, arg1, arg2 ] = process.argv
const PROJECT_PATH = process.cwd()

const main = async () => {
  switch (cmd) {
    case 'init':
      await init()
      break
    case 'build':
      await build(PROJECT_PATH)
      break
    case 'develop':
      await develop(PROJECT_PATH, build, getProjectConfig('development.port') || 5000)
      break
    case 'login':
      await login()
      break
    case 'whoami':
      const creds = netrc()['prebuilt.xyz']
      console.log(creds ? creds.email : `How should I know? Try logging!`)
      break
    case 'logout':
      const logoutCreds = netrc()
      delete logoutCreds['prebuilt.xyz']
      netrc.save(logoutCreds)
      console.log('Logged out.')
      break
    case 'deploy':
      await deploy(PROJECT_PATH, getProjectConfig('name'))
      break
    case 'env':
      const env = await request.get({ 
        url: `${process.env.ADMIN_DOMAIN}/env?name=${getProjectConfig('name')}&token=${netrc()['prebuilt.xyz'].token}`
      })
      const json = JSON.parse(env)
      console.log('Env: ', Object.keys(json).reduce((memo, key) => {
        return `${memo}
${key}=${json[key]}`
        }, ''))
      break
    case 'env:set':
      const envSetJson = await request.put({ 
        url: `${process.env.ADMIN_DOMAIN}/env?name=${getProjectConfig('name')}&token=${netrc()['prebuilt.xyz'].token}`, 
        json: {
          [arg1]: arg2
        }
      })

      console.log(`Set Env: `, Object.keys(envSetJson).reduce((memo, key) => {
        return `${memo}
${key}=${envSetJson[key]}`
        }, ''))
      break
    case 'env:unset':
      const unsetData = await request.del({ 
        url: `${process.env.ADMIN_DOMAIN}/env/${arg1}?name=${getProjectConfig('name')}&token=${netrc()['prebuilt.xyz'].token}`, 
      })
      const unsetJson = JSON.parse(unsetData)

      console.log(`Unset Env: `, Object.keys(unsetJson).reduce((memo, key) => {
        return `${memo}
${key}=${unsetJson[key]}`
        }, ''))
      break
    case 'undeploy':

      const { confirm } = await askQuestions({
        confirm: 'Are you sure you want to undeploy this site? It will no longer be auto-deployed, but no local files will be affected. (Type "CONFIRM" to confirm)'
      })

      if (confirm !== 'CONFIRM')
        return console.log('Ok, whew, looks like you didn\'t mean to undeploy anything... Carry on')

      const configForDeleting = getProjectConfig({ raw: true })
      await request.post({
        url: `${process.env.ADMIN_DOMAIN}/undeploy?name=${getProjectConfig('name')}&config=${encodeURIComponent(configForDeleting)}&token=${netrc()['prebuilt.xyz'].token}` 
      })

      console.log('Undeployed successfully.')
      break
    default:
      help()
  }
}

const getProjectConfig = (() => {
  return (keys='') => {
    const raw = fs.readFileSync(`${PROJECT_PATH}/${prebuilt.project.CONFIG_FILE}`, 'utf8')
    const config = yaml.parse(raw)
    if (keys && keys.raw) return raw
    if (!keys) return config
    else {
      return keys.split('.').reduce((memo, part) => {
        if (!memo) return null
        if (!memo[part]) return null
        return memo[part]
      }, config)
    }
  }
})()

// GO
main().then(
  () => process.exit(0),
  e => {
    console.log('Error: ', e)
    help()
    process.exit(1)
  }
)

// helpers
function help() {
  console.log(`
Prebuilt - ${chalk.gray('Static-site generator for dynamic websites')}

  ${chalk.gray('Commands:')}
    init                 - Initialize new project in current directory
    build                - One-off build from ${prebuilt.project.INPUT_DIR}/ into ${prebuilt.project.OUTPUT_DIR}/
    develop              - Start dev server, rebuilding on changes in ${prebuilt.project.DATA_DIR} or ${prebuilt.project.INPUT_DIR}

    deploy [env]         - (Re)uploads config, templates, user-defined data files to 
                           Prebuilt's syncing servers for auto-redeploying on data changes
    env                  - List all environment variables
    env:get [key]        - Get env key
    env:set [key] [val]  - Set env key
    env:unset [key]      - Unset env key
    login                - Login with a magic link sent to your email
    logout               - Logout, removing the ability to deploy or sync remote data
    whoami               - Prints out the email address of the current login
    update-billing       - Securely updates billing info for logged in account
`)
}

async function fileExists(path) {
  try {
    await promisify(fs.stat.bind(fs))(path)
    return true
  } catch(e) {
    return false
  }
}

async function askQuestions(questions) {

  let answers = {}
  
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  })

  const ask = question => {
    return new Promise(res => rl.question(question, res))
  }

  for (let key in questions) {
    const val = await ask(questions[key])
    answers[key] = val
  }

  rl.close()
  return answers
}

async function init() {

  if (await fileExists(`${PROJECT_PATH}/${prebuilt.project.CONFIG_FILE}`)) {
    return console.log('Project already created here.')
  }

  const { name } = await askQuestions({ name: 'Project Name: ' })

  await prebuilt.project.init(PROJECT_PATH, { name })

  console.log(`
Project scaffolded!

Created:
  ${prebuilt.project.INPUT_DIR}/
  ${prebuilt.project.OUTPUT_DIR}/
  ${prebuilt.project.DATA_DIR}/
  ${prebuilt.project.CONFIG_FILE} 
  `)
}

async function login() {
  const { email } = await askQuestions({ email: 'Email: ' })
  console.log('Sending you a magic link in an email. Click it and be authenticated, friend...')
  const token = await loginTask(email)
  console.log(`Nice work! You are now logged in as ${email}`)
  const existing = netrc() || {}
  existing['prebuilt.xyz'] = { email, token }
  netrc.save(existing)
}
